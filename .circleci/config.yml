version: 2.1

parameters:
  npm-repo:
    type: string
    default: "@voiceflow/alexa-runtime"
  container-image-url:
    type: string
    default: "168387678261.dkr.ecr.us-east-1.amazonaws.com/alexa"
  k8s-asset:
    type: string
    default: "deployment/alexa"
  k8s-namespace:
    type: string
    default: "voiceflow-v1" # This is usually voiceflow-v1
  ssh-fingerprint:
    type: string
    default: "31:42:5a:4e:ee:42:40:e6:77:fc:d4:1b:9f:4e:ca:46"
  dev-env-component:
    type: string
    default: "alexaruntime"

# Reusable YAML chunks
defaults:
  prod_deploy_filters: &prod_deploy_filters
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /^v[0-9]*(\.[0-9]*)*$/

  ignore_dev_env_autorebase_staging_filters:
    &ignore_dev_env_autorebase_staging_filters
    branches:
      ignore:
        - /rebase-pull-request-.*/
        - /cherry-pick-rebase-pull-request-.*/
        - /env-.*/
        - staging

  slack-fail-post-step: &slack-fail-post-step
    post-steps:
      - vfcommon/notify_slack:
          channel: dev_general
          event: fail
          mentions: "@eng_runtime"
          template: basic_fail_1
          branch_pattern: master

orbs:
  vfcommon: voiceflow/common@0.0.72
  sonarcloud: sonarsource/sonarcloud@1.0.2

jobs:
  test:
    executor: vfcommon/code-test-executor
    steps:
      - checkout
      - vfcommon/install_node_modules
      - vfcommon/setup_dynamodb
      - vfcommon/lint_source
      - vfcommon/lint_report
      - vfcommon/lint_dockerfile
      - vfcommon/dependency_tests:
          step_name: Dependency Tests
      - vfcommon/build
      - vfcommon/unit_tests
      - vfcommon/integration_tests
      # temp steps
      - vfcommon/install_aws_cli
      - vfcommon/clone_s3_assets:
          from: s3://com.voiceflow.ci.assets/alexa
          to: ~/project/tests/smoke/recordedSessions
      - vfcommon/smoke_tests
      - sonarcloud/scan

  build-push-image:
    executor: vfcommon/build-executor
    steps:
      - vfcommon/build_push_image:
          image_repo: << pipeline.parameters.container-image-url >>
          release_pkg: << pipeline.parameters.npm-repo >>

  deploy-image:
    executor: vfcommon/build-executor
    steps:
      - vfcommon/deploy_image:
          image_repo: << pipeline.parameters.container-image-url >>
          namespace: << pipeline.parameters.k8s-namespace >>
          target: << pipeline.parameters.k8s-asset >>

  deploy-on-tag:
    executor: vfcommon/build-executor
    steps:
      - vfcommon/deploy_image:
          image_repo: << pipeline.parameters.container-image-url >>
          namespace: << pipeline.parameters.k8s-namespace >>
          target: << pipeline.parameters.k8s-asset >>
          tagged: true

  build-deploy-dev-env:
    executor: vfcommon/build-executor
    steps:
      - vfcommon/build_deploy_dev_env:
          image_repo: << pipeline.parameters.container-image-url >>
          component: << pipeline.parameters.dev-env-component >>
          ssh_key: << pipeline.parameters.ssh-fingerprint >>

  check_track_exists:
    executor: vfcommon/build-executor
    description: Check if a track  exists
    parameters:
      component:
        description: The container image repository
        type: string
      bucket:
        description: The container image repository
        type: string
        default: "com.voiceflow.ci.assets"
    steps:
      - run:
          name: If container with this git SHA already exists, don't build
          command: |
            TRACK="tracks/<< parameters.component >>/$CIRCLE_BRANCH"
            set +e
            TRACK_EXECUTION=aws s3 cp s3://<< parameters.bucket >>/$TRACK /tmp/$TRACK > /dev/null 2>&1
            SEARCH_TRACK_RESULT=$?
            set -e

            # Store the result on a file in tmp folder to use in future steps
            if [[ $SEARCH_TRACK_RESULT -eq 0 ]]; then  
              echo 'export TRACK_EXISTS="true"' > /tmp/TRACK_STATUS  # Track exists, skip following steps
            else
              echo 'export TRACK_EXISTS="false"' > /tmp/TRACK_STATUS  # Track exists, skip following steps
            fi

  build_deploy_dev_env:
    executor: vfcommon/build-executor
    description: Deploy an image into a K8s cluster
    parameters:
      image_repo:
        description: The container image repository
        type: string
        default: 168387678261.dkr.ecr.us-east-1.amazonaws.com/alexa
      component:
        description: The component type for development environment deployment
        type: string
        default: alexa-runtime
      dockerfile:
        description: Name of the Dockerfile to build
        type: string
        default: Dockerfile
      attach_workspace_folder:
        description: Folder where the workspace will be attached
        type: string
        default: /tmp/vf-build
      checkout:
        description: Determines if a checkout will be executed or not
        type: boolean
        default: true
      request_remote_docker:
        description: Add the option to request a new remote docker, set to false when you concat docker jobs
        type: boolean
        default: true
      bucket:
        description: The container image repository
        type: string
        default: "com.voiceflow.ci.assets"
    steps:
      - when:
          condition: << parameters.checkout >>
          steps:
            - checkout # special step to check out source code to working directory
      - when:
          condition: << parameters.request_remote_docker >>
          steps:
            - setup_remote_docker: # Need this to run DinD
                version: 19.03.13
      - attach_workspace:
          at: << parameters.attach_workspace_folder >>
      - run:
          name: check track
          command: |
            TRACK="tracks/<< parameters.component >>/$CIRCLE_BRANCH"
            echo $TRACK
            set +e
            aws s3 cp s3://<< parameters.bucket >>/$TRACK /tmp/$TRACK
            SEARCH_TRACK_RESULT=$?
            set -e

            # Store the result on a file in tmp folder to use in future steps
            if [[ $SEARCH_TRACK_RESULT -eq 0 ]]; then  
              echo 'export TRACK_EXISTS="true"' > /tmp/TRACK_STATUS  # Track exists, skip following steps
            else
              echo 'export TRACK_EXISTS="false"' > /tmp/TRACK_STATUS  # Track exists, skip following steps
            fi
      - vfcommon/check_image_exists:
          image_repo: << parameters.image_repo >>
          request_remote_docker: false
      - run:
          name: "Build dev environment image"
          command: |
            # Load IMAGE_EXISTS variable from file previously stored in the tmp folder
            source "/tmp/IMAGE_STATUS"
            # Load TRACK_EXISTS variable from file previously stored in the tmp folder
            source "/tmp/TRACK_STATUS"

            if [[ $IMAGE_EXISTS == "false" && $TRACK_EXISTS == "true" ]]; then
              echo "hello"
              // Build Docker Image
              IMAGE_TAG="k8s-$CIRCLE_SHA1"
               echo "hello"
              IMAGE_REPO="<< parameters.image_repo >>"
               echo "hello"
              IMAGE_NAME="$IMAGE_REPO:$IMAGE_TAG"
               echo "hello"
              SEM_VER="$CIRCLE_BRANCH-$CIRCLE_SHA1"
              $(aws ecr get-login --no-include-email --region us-east-1)
              echo $IMAGE_NAME
              docker build \
                --build-arg NPM_TOKEN=//registry.npmjs.org/:_authToken=${NPM_TOKEN} \
                --build-arg build_BUILD_NUM=${CIRCLE_BUILD_NUM} \
                --build-arg build_BUILD_URL=${CIRCLE_BUILD_URL}	\
                --build-arg build_GIT_SHA=${CIRCLE_SHA1} \
                --build-arg build_SEM_VER=${SEM_VER} \
                -f << parameters.dockerfile >> \
                -t $IMAGE_NAME . 
              docker push $IMAGE_NAME

              // update the track
              TRACK="tracks/<< parameters.component >>/$CIRCLE_BRANCH"
              echo $TRACK
              cat /tmp/$TRACK | yq e '.<< parameters.component >>.image.tag = "$IMAGE_TAG"' - | tee /tmp/$TRACK
              aws s3 cp /tmp/$TRACK s3://<< parameters.bucket >>/$TRACK

            else
              echo "Image exists! avoiding build!"
            fi

# When should each job run and what are their dependencies?
workflows:
  # Staging
  build-deploy-staging:
    jobs:
      - build-push-image:
          context: dev-test
          filters:
            branches:
              only:
                - staging
      - deploy-image:
          context: dev-test
          requires:
            - build-push-image
          filters:
            branches:
              only:
                - staging

  # Development environments
  build-deploy-environment:
    jobs:
      - build-deploy-dev-env:
          context: dev-test
          filters:
            branches:
              only:
                - /env-.*/

  build-deploy-environment-new:
    jobs:
      - build_deploy_dev_env:
          context: dev-test

  # Master (production)
  test-and-release-app:
    jobs:
      - test:
          <<: *slack-fail-post-step
          context: dev-test
          filters:
            <<: *ignore_dev_env_autorebase_staging_filters

      - vfcommon/release:
          <<: *slack-fail-post-step
          context: dev-test
          requires:
            - test
          filters:
            branches:
              only: master

  deploy-app:
    jobs:
      - build-push-image:
          <<: *prod_deploy_filters
          context: dev-test
      - deploy-on-tag:
          <<: *prod_deploy_filters
          context: dev-test
          requires:
            - build-push-image
